use alloy::{
    primitives::{ Address, Bytes, U256 },
    providers::RootProvider,
    sol,
};
use alloy::pubsub::PubSubFrontend;
use alloy::core::sol_types::SolCall;
use revm::primitives::Bytecode;

use std::sync::Arc;
use std::str::FromStr;
use anyhow::anyhow;


use bigdecimal::BigDecimal;


sol! {
    #[sol(rpc)]
    contract ERC20 {
        function balanceOf(address owner) external view returns (uint256 balance);
        function approve(address spender, uint256 amount) external returns (bool);
        function transfer(address recipient, uint256 amount) external returns (bool);
        function transferFrom(address from, address recipient, uint256 amount) external returns (bool);
        function allowance(address owner, address spender) external view returns (uint256);
        function name() external view returns (string memory);
        function symbol() external view returns (string memory);
        function decimals() external view returns (uint8);
        function totalSupply() external view returns (uint256);
        function deposit() external payable;
        function withdraw(uint256 amount) external;
    
}


    #[sol(bytecode="6080806040523461001657610df9908161001c8239f35b600080fdfe608060408181526004908136101561001657600080fd5b600092833560e01c90816323a50d3c14610a2757508063ac20c2ca146102125763fa461e331461004557600080fd5b3461020e57606036600319011261020e576044359067ffffffffffffffff80831161020657366023840112156102065782840135908111610206578201366024820111610206578260a091031261020a5760248201358015158103610206576100b060448401610abe565b906100bd60648501610abe565b9260a46100cc60848701610abe565b9501359262ffffff84168094036101f0576001600160a01b0380809216961693818351967f1698ee82000000000000000000000000000000000000000000000000000000008852888a8901521660248701526044860152602085606481731f98431c8ad98523631ae4a59f267346ea31f9845afa9485156101fc5788956101bb575b508416330361017957501561016b57610168933592610b6f565b80f35b610168935060243592610b6f565b5162461bcd60e51b8152602081870152600c60248201527f4e6f742074686520706f6f6c00000000000000000000000000000000000000006044820152606490fd5b9094506020813d6020116101f4575b816101d760209383610ad2565b810103126101f0575184811681036101f057933861014e565b8780fd5b3d91506101ca565b82513d8a823e3d90fd5b8480fd5b8380fd5b8280fd5b503461020e5760c036600319011261020e576001600160a01b039182610236610b0a565b16938251809581957f70a082310000000000000000000000000000000000000000000000000000000091828452338685015260209889916024998a915afa928315610a1d5784936109ee575b506084358061076657506102a681610298610b20565b166044359030903390610b6f565b846060826102b2610b36565b168851928380927f0902f1ac0000000000000000000000000000000000000000000000000000000082525afa90811561075c5785908692610702575b506dffffffffffffffffffffffffffff918216911661030b610b20565b8380610315610b0a565b16911610156106fd57905b82610329610b20565b168a848b610335610b36565b8c5194859384928b8452168d8301525afa80156106f357839088906106be575b61035f9250610b4c565b801561065757821580158061064e575b156105e7576103e58083029280840482036105d5578402029282840414821517156105c3576103e88085029485041417156105b157820180921161059f57811561058d57046103bc610b20565b82806103c6610b0a565b169116101561058657845b826103da610b36565b168851918b83019267ffffffffffffffff9381811085821117610574578b52888152823b1561057057918b91898b61045682968f51998a97889687957f022c0d9f000000000000000000000000000000000000000000000000000000008752860152840152336044840152608060648401526084830190610cd5565b03925af1801561056657908a93929161053d575b5050610474610b0a565b169187875180948193825233898301525afa908115610533578391610501575b50915b5080156104fa576104a791610b4c565b925b60a43584106104ba57505051908152f35b601e9085606494519362461bcd60e51b85528401528201527f5265616c20416d6f756e74203c204d696e696d756d20526563656976656400006044820152fd5b50926104a9565b90508681813d831161052c575b6105188183610ad2565b81010312610527575138610494565b600080fd5b503d61050e565b85513d85823e3d90fd5b90809296935011610554578652928790388061046a565b8782604188634e487b7160e01b835252fd5b88513d88823e3d90fd5b8880fd5b8c8a60418d634e487b7160e01b835252fd5b84906103d1565b8886601289634e487b7160e01b835252fd5b8886601189634e487b7160e01b835252fd5b898760118a634e487b7160e01b835252fd5b8a8860118b634e487b7160e01b835252fd5b8c8a60118d634e487b7160e01b835252fd5b60848960288d8f8e519362461bcd60e51b85528401528201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60448201527f49515549444954590000000000000000000000000000000000000000000000006064820152fd5b5082151561036f565b608488602b8c8e8d519362461bcd60e51b85528401528201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201527f4e5055545f414d4f554e540000000000000000000000000000000000000000006064820152fd5b50508a81813d83116106ec575b6106d58183610ad2565b810103126106e8578261035f9151610355565b8680fd5b503d6106cb565b89513d89823e3d90fd5b610320565b9150506060813d606011610754575b8161071e60609383610ad2565b810103126102065761072f81610d15565b8761073b8b8401610d15565b92015163ffffffff81160361075057386102ee565b8580fd5b3d9150610711565b87513d87823e3d90fd5b6001036109ad57610775610b20565b818061077f610b0a565b16911610801561099257856401000276ad5b8a8461079b610b36565b168a51938480927fddca3f430000000000000000000000000000000000000000000000000000000082525afa9182156106f357908b9392918892610954575b5062ffffff856107e8610b36565b1692866107f3610b20565b8d826107fd610b0a565b928983519b8c015216908901521660608701523360808701521660a085015260a0845260c084019284841067ffffffffffffffff85111761094257838b527f128acb080000000000000000000000000000000000000000000000000000000084523360c486015260e4850152604435610104850152841661012484015260a061014484015288908290818960bf198761089a610164820182610cd5565b0301925af18015610566579188918b949361090f575b5050506108bb610b0a565b169187875180948193825233898301525afa9081156105335783916108e2575b5091610497565b90508681813d8311610908575b6108f98183610ad2565b8101031261020e5751386108db565b503d6108ef565b909180939450903d841161093a575b8161092891610ad2565b8101031261020a5787908638806108b0565b3d915061091e565b8b8960418c634e487b7160e01b835252fd5b809250849193943d831161098b575b61096d8183610ad2565b810103126106e8575162ffffff811681036106e8578a9291386107da565b503d610963565b8573fffd8963efd1fc6a506488495d951d5263988d25610791565b6064856014898b8a519362461bcd60e51b85528401528201527f496e76616c696420706f6f6c2076617269616e740000000000000000000000006044820152fd5b9092508781813d8311610a16575b610a068183610ad2565b8101031261020a57519138610282565b503d6109fc565b86513d86823e3d90fd5b905083913461020e578060031936011261020e578335906001600160a01b03821680920361020a577fa9059cbb000000000000000000000000000000000000000000000000000000006020840152336024840152602435604484015260448352608083019083821067ffffffffffffffff831117610aab5761016894955052610be0565b602485604188634e487b7160e01b835252fd5b35906001600160a01b038216820361052757565b90601f8019910116810190811067ffffffffffffffff821117610af457604052565b634e487b7160e01b600052604160045260246000fd5b6024356001600160a01b03811681036105275790565b6004356001600160a01b03811681036105275790565b6064356001600160a01b03811681036105275790565b91908203918211610b5957565b634e487b7160e01b600052601160045260246000fd5b9290604051927f23b872dd0000000000000000000000000000000000000000000000000000000060208501526001600160a01b03809216602485015216604483015260648201526064815260a081019181831067ffffffffffffffff841117610af457610bde92604052610be0565b565b6001600160a01b031690600080826020829451910182865af13d15610cc9573d9067ffffffffffffffff8211610cb55790610c3d9160405191610c2d6020601f19601f8401160184610ad2565b82523d84602084013e5b84610d30565b908151918215159283610c86575b505050610c555750565b602490604051907f5274afe70000000000000000000000000000000000000000000000000000000082526004820152fd5b819293509060209181010312610cb1576020015190811591821503610cae5750388080610c4b565b80fd5b5080fd5b602483634e487b7160e01b81526041600452fd5b610c3d90606090610c37565b919082519283825260005b848110610d01575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610ce0565b51906dffffffffffffffffffffffffffff8216820361052757565b90610d6f5750805115610d4557805190602001fd5b60046040517f1425ea42000000000000000000000000000000000000000000000000000000008152fd5b81511580610dba575b610d80575090565b6024906001600160a01b03604051917f9996b315000000000000000000000000000000000000000000000000000000008352166004820152fd5b50803b15610d7856fea26469706673582212207dff05993375a2f7baff60fb7f3a4d3baf3b9e97af56129124b1797f380c3ecb64736f6c63430008170033")]
    contract SwapRouter {
        struct Params {
            address input_token;
            address output_token;
            uint256 amount_in;
            address pool;
            uint pool_variant;
            uint256 minimum_received;
        }
        function do_swap(Params calldata params) external returns (uint256 real_amount);
        function recover_erc20(address token, uint256 amount) external;
        
    }
}

// Deployed Bytecode of swap router contract
pub fn swap_router_bytecode() -> Bytecode {
    let bytes: Bytes = "0x608060408181526004908136101561001657600080fd5b600092833560e01c90816323a50d3c14610a2757508063ac20c2ca146102125763fa461e331461004557600080fd5b3461020e57606036600319011261020e576044359067ffffffffffffffff80831161020657366023840112156102065782840135908111610206578201366024820111610206578260a091031261020a5760248201358015158103610206576100b060448401610abe565b906100bd60648501610abe565b9260a46100cc60848701610abe565b9501359262ffffff84168094036101f0576001600160a01b0380809216961693818351967f1698ee82000000000000000000000000000000000000000000000000000000008852888a8901521660248701526044860152602085606481731f98431c8ad98523631ae4a59f267346ea31f9845afa9485156101fc5788956101bb575b508416330361017957501561016b57610168933592610b6f565b80f35b610168935060243592610b6f565b5162461bcd60e51b8152602081870152600c60248201527f4e6f742074686520706f6f6c00000000000000000000000000000000000000006044820152606490fd5b9094506020813d6020116101f4575b816101d760209383610ad2565b810103126101f0575184811681036101f057933861014e565b8780fd5b3d91506101ca565b82513d8a823e3d90fd5b8480fd5b8380fd5b8280fd5b503461020e5760c036600319011261020e576001600160a01b039182610236610b0a565b16938251809581957f70a082310000000000000000000000000000000000000000000000000000000091828452338685015260209889916024998a915afa928315610a1d5784936109ee575b506084358061076657506102a681610298610b20565b166044359030903390610b6f565b846060826102b2610b36565b168851928380927f0902f1ac0000000000000000000000000000000000000000000000000000000082525afa90811561075c5785908692610702575b506dffffffffffffffffffffffffffff918216911661030b610b20565b8380610315610b0a565b16911610156106fd57905b82610329610b20565b168a848b610335610b36565b8c5194859384928b8452168d8301525afa80156106f357839088906106be575b61035f9250610b4c565b801561065757821580158061064e575b156105e7576103e58083029280840482036105d5578402029282840414821517156105c3576103e88085029485041417156105b157820180921161059f57811561058d57046103bc610b20565b82806103c6610b0a565b169116101561058657845b826103da610b36565b168851918b83019267ffffffffffffffff9381811085821117610574578b52888152823b1561057057918b91898b61045682968f51998a97889687957f022c0d9f000000000000000000000000000000000000000000000000000000008752860152840152336044840152608060648401526084830190610cd5565b03925af1801561056657908a93929161053d575b5050610474610b0a565b169187875180948193825233898301525afa908115610533578391610501575b50915b5080156104fa576104a791610b4c565b925b60a43584106104ba57505051908152f35b601e9085606494519362461bcd60e51b85528401528201527f5265616c20416d6f756e74203c204d696e696d756d20526563656976656400006044820152fd5b50926104a9565b90508681813d831161052c575b6105188183610ad2565b81010312610527575138610494565b600080fd5b503d61050e565b85513d85823e3d90fd5b90809296935011610554578652928790388061046a565b8782604188634e487b7160e01b835252fd5b88513d88823e3d90fd5b8880fd5b8c8a60418d634e487b7160e01b835252fd5b84906103d1565b8886601289634e487b7160e01b835252fd5b8886601189634e487b7160e01b835252fd5b898760118a634e487b7160e01b835252fd5b8a8860118b634e487b7160e01b835252fd5b8c8a60118d634e487b7160e01b835252fd5b60848960288d8f8e519362461bcd60e51b85528401528201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60448201527f49515549444954590000000000000000000000000000000000000000000000006064820152fd5b5082151561036f565b608488602b8c8e8d519362461bcd60e51b85528401528201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201527f4e5055545f414d4f554e540000000000000000000000000000000000000000006064820152fd5b50508a81813d83116106ec575b6106d58183610ad2565b810103126106e8578261035f9151610355565b8680fd5b503d6106cb565b89513d89823e3d90fd5b610320565b9150506060813d606011610754575b8161071e60609383610ad2565b810103126102065761072f81610d15565b8761073b8b8401610d15565b92015163ffffffff81160361075057386102ee565b8580fd5b3d9150610711565b87513d87823e3d90fd5b6001036109ad57610775610b20565b818061077f610b0a565b16911610801561099257856401000276ad5b8a8461079b610b36565b168a51938480927fddca3f430000000000000000000000000000000000000000000000000000000082525afa9182156106f357908b9392918892610954575b5062ffffff856107e8610b36565b1692866107f3610b20565b8d826107fd610b0a565b928983519b8c015216908901521660608701523360808701521660a085015260a0845260c084019284841067ffffffffffffffff85111761094257838b527f128acb080000000000000000000000000000000000000000000000000000000084523360c486015260e4850152604435610104850152841661012484015260a061014484015288908290818960bf198761089a610164820182610cd5565b0301925af18015610566579188918b949361090f575b5050506108bb610b0a565b169187875180948193825233898301525afa9081156105335783916108e2575b5091610497565b90508681813d8311610908575b6108f98183610ad2565b8101031261020e5751386108db565b503d6108ef565b909180939450903d841161093a575b8161092891610ad2565b8101031261020a5787908638806108b0565b3d915061091e565b8b8960418c634e487b7160e01b835252fd5b809250849193943d831161098b575b61096d8183610ad2565b810103126106e8575162ffffff811681036106e8578a9291386107da565b503d610963565b8573fffd8963efd1fc6a506488495d951d5263988d25610791565b6064856014898b8a519362461bcd60e51b85528401528201527f496e76616c696420706f6f6c2076617269616e740000000000000000000000006044820152fd5b9092508781813d8311610a16575b610a068183610ad2565b8101031261020a57519138610282565b503d6109fc565b86513d86823e3d90fd5b905083913461020e578060031936011261020e578335906001600160a01b03821680920361020a577fa9059cbb000000000000000000000000000000000000000000000000000000006020840152336024840152602435604484015260448352608083019083821067ffffffffffffffff831117610aab5761016894955052610be0565b602485604188634e487b7160e01b835252fd5b35906001600160a01b038216820361052757565b90601f8019910116810190811067ffffffffffffffff821117610af457604052565b634e487b7160e01b600052604160045260246000fd5b6024356001600160a01b03811681036105275790565b6004356001600160a01b03811681036105275790565b6064356001600160a01b03811681036105275790565b91908203918211610b5957565b634e487b7160e01b600052601160045260246000fd5b9290604051927f23b872dd0000000000000000000000000000000000000000000000000000000060208501526001600160a01b03809216602485015216604483015260648201526064815260a081019181831067ffffffffffffffff841117610af457610bde92604052610be0565b565b6001600160a01b031690600080826020829451910182865af13d15610cc9573d9067ffffffffffffffff8211610cb55790610c3d9160405191610c2d6020601f19601f8401160184610ad2565b82523d84602084013e5b84610d30565b908151918215159283610c86575b505050610c555750565b602490604051907f5274afe70000000000000000000000000000000000000000000000000000000082526004820152fd5b819293509060209181010312610cb1576020015190811591821503610cae5750388080610c4b565b80fd5b5080fd5b602483634e487b7160e01b81526041600452fd5b610c3d90606090610c37565b919082519283825260005b848110610d01575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610ce0565b51906dffffffffffffffffffffffffffff8216820361052757565b90610d6f5750805115610d4557805190602001fd5b60046040517f1425ea42000000000000000000000000000000000000000000000000000000008152fd5b81511580610dba575b610d80575090565b6024906001600160a01b03604051917f9996b315000000000000000000000000000000000000000000000000000000008352166004820152fd5b50803b15610d7856fea26469706673582212207dff05993375a2f7baff60fb7f3a4d3baf3b9e97af56129124b1797f380c3ecb64736f6c63430008170033"
        .parse()
        .unwrap();
    Bytecode::new_raw(bytes)
    
}

/// Parameters used for a swap
#[derive(Debug, Clone)]
pub struct SwapParams {
    pub input_token: Address,
    pub output_token: Address,
    pub amount_in: U256,
    pub pool: Address,
    pub pool_variant: U256,
    pub minimum_received: U256,
}

#[derive(Debug, Clone)]
pub struct Pool {
    pub address: Address,
    pub token0: Address,
    pub token1: Address,
    pub variant: PoolVariant,
}

impl Pool {
    pub fn variant(&self) -> U256 {
        match self.variant {
            PoolVariant::UniswapV2 => U256::ZERO,
            PoolVariant::UniswapV3 => U256::from(1),
        }
    }
}

#[derive(Debug, Clone)]
pub enum PoolVariant {
    UniswapV2,
    UniswapV3,
}

/// Encodes the swap parameters needed for [SwapRouter] contract
pub fn encode_swap(params: SwapParams) -> Vec<u8> {
    let contract = SwapRouter::do_swapCall {
        params: SwapRouter::Params {
            input_token: params.input_token,
            output_token: params.output_token,
            amount_in: params.amount_in,
            pool: params.pool,
            pool_variant: params.pool_variant,
            minimum_received: params.minimum_received,
        }
    };
    

    contract.abi_encode()
}

/// Decodes the output of the swap of the [SwapRouter] contract
pub fn decode_swap(bytes: &Bytes) -> Result<U256, anyhow::Error> {
    let amount = SwapRouter::do_swapCall::abi_decode_returns(&bytes, true)?;
    Ok(amount.real_amount)
}

/// Encodes the recover_erc20 function of the [SwapRouter] contract
pub fn encode_recover_erc20(token: Address, amount: U256) -> Vec<u8> {
    let contract = SwapRouter::recover_erc20Call {
        token,
        amount,
    };

    contract.abi_encode()
}

/// Struct that holds ERC20 token information
#[derive(Debug, Clone)]
pub struct ERC20Token {
    pub address: Address,
    pub symbol: String,
    pub name: String,
    pub decimals: u8,
    pub total_supply: U256,
}

impl ERC20Token {
    pub async fn new(
        address: Address,
        client: Arc<RootProvider<PubSubFrontend>>
    ) -> Result<Self, anyhow::Error> {
        let contract = ERC20::new(address, client);
        let symbol = contract.symbol().call().await?._0;
        let name = contract.name().call().await?._0;
        let decimals = contract.decimals().call().await?._0;
        let total_supply = contract.totalSupply().call().await?._0;
        Ok(Self {
            address,
            symbol,
            name,
            decimals,
            total_supply,
        })
    }

    pub async fn balance_of(
        &self,
        owner: Address,
        client: Arc<RootProvider<PubSubFrontend>>
    ) -> Result<U256, anyhow::Error> {
        let contract = ERC20::new(self.address, client);
        let bal = contract.balanceOf(owner).call().await?;
        Ok(bal.balance)
    }

    pub async fn allowance(
        &self,
        owner: Address,
        spender: Address,
        client: Arc<RootProvider<PubSubFrontend>>
    ) -> Result<U256, anyhow::Error> {
        let contract = ERC20::new(self.address, client);
        let allowance = contract.allowance(owner, spender).call().await?._0;
        Ok(allowance)
    }

    pub fn encode_balance_of(&self, owner: Address) -> Vec<u8> {
        let contract = ERC20::balanceOfCall {
            owner,
        };
        contract.abi_encode()
    }

    pub fn encode_approve(&self, spender: Address, amount: U256) -> Vec<u8> {
        let contract = ERC20::approveCall {
            spender,
            amount,
        };
        contract.abi_encode()
    }

    pub fn encode_transfer(&self, recipient: Address, amount: U256) -> Vec<u8> {
        let contract = ERC20::transferCall {
            recipient,
            amount,
        };
        contract.abi_encode()
    }

    pub fn encode_deposit(&self) -> Vec<u8> {
        let contract = ERC20::depositCall {};
        contract.abi_encode()
    }

    pub fn encode_withdraw(&self, amount: U256) -> Vec<u8> {
        let contract = ERC20::withdrawCall { amount };
        contract.abi_encode()
    }

    pub fn decode_balance_of(&self, bytes: &Bytes) -> Result<U256, anyhow::Error> {
        let balance = ERC20::balanceOfCall::abi_decode_returns(&bytes, true)?;
        Ok(balance.balance)
    }

}



pub fn revert_msg(bytes: &Bytes) -> String {
    if bytes.len() < 4 {
        return "EVM Returned 0x (Empty Bytes)".to_string();
    }
    let error_data = &bytes[4..];

    match String::from_utf8(error_data.to_vec()) {
        Ok(s) => s.trim_matches(char::from(0)).to_string(),
        Err(_) => "EVM Returned 0x (Empty Bytes)".to_string(),
    }
}

pub fn parse_ether(amount: &str) -> anyhow::Result<U256> {
    let amount = BigDecimal::from_str(amount).map_err(|e| anyhow!("Invalid number format: {}", e))?;
    let divisor = BigDecimal::from_str("1000000000000000000").expect("divisor string is invalid");

    let wei_amount = amount * divisor;

    let wei_str = wei_amount.to_string();
    let wei_str = wei_str.split('.').next().unwrap_or_default();

    // Convert the string to U256
    U256::from_str(wei_str).map_err(|e| anyhow!("Error converting to U256: {}", e))
}

pub fn to_readable(amount: U256, token: ERC20Token) -> String {
    let divisor_str = format!("1{:0>width$}", "", width = token.decimals as usize);
    let divisor = BigDecimal::from_str(&divisor_str).unwrap();
    let amount_as_decimal = BigDecimal::from_str(&amount.to_string()).unwrap();
    let amount = amount_as_decimal / divisor;
    format!("{:.4} {}", amount, token.symbol)
}